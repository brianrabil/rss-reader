// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//* ----------------------------- Authentication ----------------------------- *//

/// Account model represents a user's account with an external authentication provider.
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// User model represents a user of the application.
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//* -------------------------------- RSS Feed -------------------------------- *//

/// Feed model represents an external RSS feed.
model Feed {
  id          Int       @id @default(autoincrement())
  url         String    @unique // URL of the RSS feed
  title       String? // Title of the feed
  description String? // Description of the feed
  favicon     String? // URL of the feed's favicon or representative image
  lastUpdated DateTime? // Timestamp of the last feed update
  items       Article[] // Articles in the feed
}

/// Article model represents a news article.
model Article {
  id          Int      @id @default(autoincrement())
  guid        String   @unique // Unique identifier for the article
  title       String // Title of the article
  description String? // Short description or summary of the article
  content     String? // Full content of the article
  imageUrl    String? // URL of the main image or thumbnail for the article
  authorId    Int? // ID of the author of the article
  link        String // Direct link to the article
  pubDate     String? // Publication date of the article
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  feedId      Int?

  Feed Feed? @relation(fields: [feedId], references: [id])
}
