// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//* ----------------------------- Authentication ----------------------------- *//

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//* -------------------------------- RSS Feed -------------------------------- *//

/// Feed model represents an external RSS feed.
model Feed {
  id          Int       @id @default(autoincrement())
  url         String    @unique // URL of the RSS feed
  title       String? // Title of the feed
  description String? // Description of the feed
  favicon     String? // URL of the feed's favicon or representative image
  lastUpdated DateTime? // Timestamp of the last feed update
}

/// Author model represents the creator of an article.
model Author {
  id            Int       @id @default(autoincrement())
  articles      Article[] // Articles written by this author
  bio           String? // Short biography of the author
  email         String? // Contact email of the author
  linkedinUrl   String? // URL to the author's LinkedIn profile
  name          String // Full name of the author
  profileImage  String? // URL to the author's profile image
  twitterHandle String?   @unique // Twitter handle of the author
  website       String? // Personal or professional website of the author
}

/// Article model represents a news article.
model Article {
  id             Int      @id @default(autoincrement())
  subscriptionId Int // ID of the Subscription through which the article was accessed
  guid           String   @unique // Unique identifier for the article
  title          String // Title of the article
  description    String? // Short description or summary of the article
  content        String? // Full content of the article
  imageUrl       String? // URL of the main image or thumbnail for the article
  authorId       Int? // ID of the author of the article
  link           String // Direct link to the article
  pubDate        DateTime // Publication date of the article
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  author         Author?  @relation(fields: [authorId], references: [id])
}
