import { Project, StructureKind } from "ts-morph";
import { RSSHub } from "../src/lib/RSSHub/RSSHub.mts";
import { format } from "date-fns";
import prettier from "prettier";

const config = {
	outFile: "src/lib/RSSHub/generated.ts",
};

function normalizeEnumName(name) {
	// Prefix for enum members that start with a number or contain invalid characters
	const prefix = "NUM_";
	// Check if the name starts with a number or contains a hyphen
	if (/^\d/.test(name) || name.includes("-")) {
		return prefix + name.replace(/-/g, "_");
	}
	return name;
}

async function generateNamespaces(rsshub: RSSHub) {
	const namespaceData = await rsshub.getNamespace();

	const namespaces = Object.keys(namespaceData);

	const categories = new Set<string>();

	for (const ns of Object.values(namespaceData)) {
		if (ns.categories) {
			ns.categories.forEach((cat) => categories.add(cat));
		}

		if (ns.routes) {
			Object.values(ns.routes).forEach((route) => {
				if (route.categories) {
					route.categories.forEach((cat) => categories.add(cat));
				}
			});
		}
	}

	// Initialize ts-morph project
	const project = new Project();
	const sourceFile = project.createSourceFile(config.outFile, "", { overwrite: true });

	// Get current date and time for the banner comment
	const dateTime = format(new Date(), "yyyy-MM-dd HH:mm:ss");

	// Banner comment to be included at the top of the file
	const bannerComment = `/**
 * AUTO-GENERATED FILE - DO NOT EDIT!
 * This file was generated by the script \`scripts/generateNamespaces.ts\` on ${dateTime}.
 * Changes to this file may be overwritten by subsequent generation.
 */
`;

	// Add the banner comment to the source file
	sourceFile.insertText(0, bannerComment);

	sourceFile.addEnum({
		name: "Namespaces",
		isExported: true,
		members: namespaces.map((ns) => ({
			name: normalizeEnumName(ns.toUpperCase()),
			value: ns,
		})),
	});

	sourceFile.addTypeAlias({
		name: "Namespace",
		type: Array.from(namespaces)
			.map((cat) => `'${cat}'`)
			.join(" | "),
		isExported: true,
	});

	sourceFile.addEnum({
		name: "Categories",
		isExported: true,
		members: Array.from(categories).map((cat) => ({
			name: normalizeEnumName(cat.toUpperCase().replace(/-/g, "_")),
			value: cat,
		})),
	});

	sourceFile.addTypeAlias({
		name: "Category",
		type: Array.from(categories)
			.map((cat) => `'${cat}'`)
			.join(" | "),
		isExported: true,
	});

	const formattedCode = await prettier.format(sourceFile.getFullText(), {
		parser: "typescript",
	});

	sourceFile.replaceWithText(formattedCode);

	// Save the formatted source file
	// Save the source file
	try {
		await sourceFile.save();
		console.log(`Namespaces have been written to ${config.outFile}`);
	} catch (error) {
		console.error("Error writing namespaces to file:", error);
	}
}

(async function main() {
	const rsshub = new RSSHub();
	await generateNamespaces(rsshub);
})();
